package com.backendrumba.rumba_music.controller;import com.backendrumba.rumba_music.model.User;import com.backendrumba.rumba_music.service.UserService;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.http.HttpStatus;import org.springframework.http.ResponseEntity;import org.springframework.web.bind.annotation.*;import java.util.List;import java.util.Map;import java.util.Optional;@RestController@RequestMapping("/api/users")public class UserController {    @Autowired    private UserService userService;    // Endpoint para registrar un nuevo usuario        @PostMapping("/register")        public ResponseEntity<String> registerUser(@RequestBody User user) {            try {                userService.registerUser(user.getName(), user.getRole());                return new ResponseEntity<>("Usuario registrado exitosamente.", HttpStatus.OK);            } catch (RuntimeException e) {                return new ResponseEntity<>(e.getMessage(), HttpStatus.BAD_REQUEST);            }        }    // Método para login    @PostMapping("/login")    public ResponseEntity<User> loginUser(@RequestBody Map<String, String> request) {        String name = request.get("name");        try {            User user = userService.loginUser(name);            return new ResponseEntity<>(user, HttpStatus.OK);  // Devuelve el usuario si fue encontrado        } catch (RuntimeException e) {            return new ResponseEntity<>(null, HttpStatus.NOT_FOUND);  // Si no se encontró, devuelve 404        }    }    // Endpoint para encontrar un usuario por su ID    @GetMapping("/{userId}")    public ResponseEntity<User> findUserById(@PathVariable Long userId) {        Optional<User> user = userService.findById(userId);        if (user.isPresent()) {            return new ResponseEntity<>(user.get(), HttpStatus.OK);        } else {            return new ResponseEntity<>(HttpStatus.NOT_FOUND);        }    }    // Endpoint para listar todos los usuarios con rol USER    @GetMapping("/users")    public ResponseEntity<List<User>> findAllUsers() {        List<User> users = userService.findAllUsers();        return new ResponseEntity<>(users, HttpStatus.OK);    }    // Endpoint para listar todos los DJs    @GetMapping("/djs")    public ResponseEntity<List<User>> findAllDJs() {        List<User> djs = userService.findAllDJs();        return new ResponseEntity<>(djs, HttpStatus.OK);    }    // Endpoint para obtener todos los usuarios    @GetMapping("/all")    public ResponseEntity<List<User>> findAll() {        List<User> users = userService.findAll();        return new ResponseEntity<>(users, HttpStatus.OK);    }    // Endpoint para actualizar un usuario    @PutMapping("/{userId}")    public ResponseEntity<User> updateUser(@PathVariable Long userId, @RequestBody User updatedUser) {        try {            User user = userService.updateUser(userId, updatedUser);            return new ResponseEntity<>(user, HttpStatus.OK);        } catch (RuntimeException e) {            return new ResponseEntity<>(HttpStatus.NOT_FOUND);        }    }    // Endpoint para eliminar un usuario por su ID    @DeleteMapping("/{userId}")    public ResponseEntity<String> deleteUser(@PathVariable Long userId) {        try {            userService.deleteUser(userId);            return new ResponseEntity<>("Usuario eliminado exitosamente.", HttpStatus.OK);        } catch (RuntimeException e) {            return new ResponseEntity<>(e.getMessage(), HttpStatus.NOT_FOUND);        }    }}