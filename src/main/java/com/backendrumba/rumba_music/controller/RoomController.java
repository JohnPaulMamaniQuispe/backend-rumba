package com.backendrumba.rumba_music.controller;import com.backendrumba.rumba_music.model.Room;import com.backendrumba.rumba_music.model.User;import com.backendrumba.rumba_music.service.RoomService;import com.backendrumba.rumba_music.service.UserService;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.http.HttpStatus;import org.springframework.http.ResponseEntity;import org.springframework.web.bind.annotation.*;import java.util.Optional;@RestController@RequestMapping("/api/rooms")public class RoomController {    @Autowired    private RoomService roomService;    @Autowired    private UserService userService;    // Endpoint para crear una nueva sala (solo DJs pueden hacerlo)    @PostMapping("/create/{userId}")    public ResponseEntity<String> createRoom(@PathVariable Long userId) {        Optional<User> userOptional = userService.findById(userId);        if (userOptional.isPresent()) {            User dj = userOptional.get();            try {                Room room = roomService.createRoom(dj);                return ResponseEntity.status(HttpStatus.CREATED).body("Sala creada con éxito. Código de sala: " + room.getRoomCode());            } catch (RuntimeException e) {                return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(e.getMessage());            }        } else {            return ResponseEntity.status(HttpStatus.NOT_FOUND).body("DJ no encontrado.");        }    }    // Endpoint para unirse a una sala    @PostMapping("/join/{userId}")    public ResponseEntity<String> joinRoom(@PathVariable Long userId, @RequestParam String roomCode) {        Optional<User> userOptional = userService.findById(userId);        if (userOptional.isPresent()) {            User user = userOptional.get();            try {                String result = roomService.joinRoom(user, roomCode);                return ResponseEntity.ok(result);            } catch (RuntimeException e) {                return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(e.getMessage());            }        } else {            return ResponseEntity.status(HttpStatus.NOT_FOUND).body("Usuario no encontrado.");        }    }    // Endpoint para verificar si la sala está reproduciendo música    @GetMapping("/is-playing/{roomCode}")    public ResponseEntity<Boolean> isRoomPlaying(@PathVariable String roomCode) {        boolean isPlaying = roomService.isRoomPlaying(roomCode);        return ResponseEntity.ok(isPlaying);    }    // Endpoint para eliminar una sala (usado por el DJ)    @DeleteMapping("/delete/{roomCode}")    public ResponseEntity<String> deleteRoom(@PathVariable String roomCode) {        Optional<Room> roomOptional = roomService.findByRoomCode(roomCode);        if (roomOptional.isPresent()) {            Room room = roomOptional.get();            roomService.deleteRoom(room);            return ResponseEntity.ok("Sala eliminada con éxito.");        } else {            return ResponseEntity.status(HttpStatus.NOT_FOUND).body("Sala no encontrada.");        }    }}