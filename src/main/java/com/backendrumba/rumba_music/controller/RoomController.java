package com.backendrumba.rumba_music.controller;import com.backendrumba.rumba_music.model.PlayMessage;import com.backendrumba.rumba_music.model.Room;import com.backendrumba.rumba_music.model.Song;import com.backendrumba.rumba_music.model.User;import com.backendrumba.rumba_music.service.RoomService;import com.backendrumba.rumba_music.service.SongService;import com.backendrumba.rumba_music.service.UserService;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.http.HttpStatus;import org.springframework.http.ResponseEntity;import org.springframework.messaging.simp.SimpMessagingTemplate;import org.springframework.web.bind.annotation.*;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import java.util.List;import java.util.Optional;//el dj solo puede crear una sala//cerrar sala//crear@RestController@RequestMapping("/api/rooms")@CrossOrigin(origins = "*")public class RoomController {    @Autowired    private RoomService roomService;    @Autowired    private UserService userService;    @Autowired    private SongService songService;    @Autowired    private SimpMessagingTemplate messagingTemplate;    private static final Logger logger = LoggerFactory.getLogger(SongController.class);    // Método que envía la señal de reproducción a la sala con el código específico    @PostMapping("/play/{roomCode}/{songId}")    public ResponseEntity<String> playSongInRoom(@PathVariable String roomCode, @PathVariable Long songId) {        Optional<Room> roomOptional = roomService.findByRoomCode(roomCode);        if (roomOptional.isPresent()) {            Room room = roomOptional.get();            // Crear un mensaje de reproducción            PlayMessage message = new PlayMessage(songId, roomCode);            // Enviar la señal a todos los dispositivos conectados a la sala usando WebSocket            messagingTemplate.convertAndSend("/topic/room/" + roomCode, message);            return ResponseEntity.ok("Señal de reproducción enviada a la sala: " + roomCode);        } else {            return ResponseEntity.status(HttpStatus.NOT_FOUND).body("Sala no encontrada.");        }    }    // Endpoint para crear una nueva sala (solo DJs pueden hacerlo)/*    @PostMapping("/create/{userId}")    public ResponseEntity<String> createRoom(@PathVariable Long userId) {        Optional<User> userOptional = userService.findById(userId);        if (userOptional.isPresent()) {            User dj = userOptional.get();            try {                Room room = roomService.createRoom(dj);                return ResponseEntity.status(HttpStatus.CREATED).body("Sala creada con éxito. Código de sala: " + room.getRoomCode());            } catch (RuntimeException e) {                return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(e.getMessage());            }        } else {            return ResponseEntity.status(HttpStatus.NOT_FOUND).body("DJ no encontrado.");        }    }*/    @PostMapping("/create/{userId}")    public ResponseEntity<String> createRoom(@PathVariable Long userId) {        Optional<User> userOptional = userService.findById(userId);        if (userOptional.isPresent()) {            User dj = userOptional.get();            try {                Room room = roomService.createRoom(dj);  // No necesitamos pasar el tiempo de expiración                return ResponseEntity.status(HttpStatus.CREATED).body("Sala creada con éxito. Código de sala: " + room.getRoomCode());            } catch (RuntimeException e) {                return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(e.getMessage());            }        } else {            return ResponseEntity.status(HttpStatus.NOT_FOUND).body("DJ no encontrado.");        }    }    // Endpoint para unirse a una sala    @PostMapping("/join/{userId}")    public ResponseEntity<String> joinRoom(@PathVariable Long userId, @RequestParam String roomCode) {        Optional<User> userOptional = userService.findById(userId);        if (userOptional.isPresent()) {            User user = userOptional.get();            try {                String result = roomService.joinRoom(user, roomCode);                return ResponseEntity.ok(result);            } catch (RuntimeException e) {                return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(e.getMessage());            }        } else {            return ResponseEntity.status(HttpStatus.NOT_FOUND).body("Usuario no encontrado.");        }    }    // Endpoint para verificar si la sala está reproduciendo música    @GetMapping("/is-playing/{roomCode}")    public ResponseEntity<Boolean> isRoomPlaying(@PathVariable String roomCode) {        boolean isPlaying = roomService.isRoomPlaying(roomCode);        return ResponseEntity.ok(isPlaying);    }    // Endpoint para eliminar una sala (usado por el DJ)    @DeleteMapping("/delete/{roomCode}")    public ResponseEntity<String> deleteRoom(@PathVariable String roomCode) {        Optional<Room> roomOptional = roomService.findByRoomCode(roomCode);        if (roomOptional.isPresent()) {            Room room = roomOptional.get();            roomService.deleteRoom(room);            return ResponseEntity.ok("Sala eliminada con éxito.");        } else {            return ResponseEntity.status(HttpStatus.NOT_FOUND).body("Sala no encontrada.");        }    }    // Endpoint para validar si un código de sala es válido    @GetMapping("/validate/{roomCode}")    public ResponseEntity<Boolean> validateRoomCode(@PathVariable String roomCode) {        Optional<Room> roomOptional = roomService.findByRoomCode(roomCode);        if (roomOptional.isPresent()) {            return ResponseEntity.ok(true);  // Código de sala válido        } else {            return ResponseEntity.ok(false);  // Código de sala no válido        }    }/*    @GetMapping("/validate-and-filter/{roomCode}/{userId}")    public ResponseEntity<?> validateAndFilterSongs(@PathVariable String roomCode, @PathVariable Long userId) {        // Validar el código de la sala        Optional<Room> roomOptional = roomService.findByRoomCode(roomCode);        if (roomOptional.isPresent()) {            // Si la validación del código es exitosa, filtrar las canciones por el DJ            try {                List<Song> songs = songService.getSongsByDJOrAdmin(userId);                return new ResponseEntity<>(songs, HttpStatus.OK);            } catch (RuntimeException e) {                return new ResponseEntity<>("Error al obtener las canciones", HttpStatus.BAD_REQUEST);            }        } else {            // Si el código de la sala no es válido, devolver un error            return new ResponseEntity<>("Código de sala no válido", HttpStatus.NOT_FOUND);        }    }*/    @GetMapping("/validate-and-filter/{roomCode}/{userId}")    public ResponseEntity<List<Song>> validateAndFilterSongs(@PathVariable String roomCode, @PathVariable Long userId) {        // Validar el código de la sala        Optional<Room> roomOptional = roomService.findByRoomCode(roomCode);        logger.info("roomOptional" + roomOptional.isPresent());        if (roomOptional.isPresent()) {            // Si la validación del código es exitosa, filtrar las canciones por el DJ            System.out.println("Si la validación del código es exitosa, filtrar las canciones por el DJ");            logger.info("Si la validación del código es exitosa, filtrar las canciones por el DJ");            try {                List<Song> songs = songService.getSongsByDJOrAdmin(userId);                return new ResponseEntity<>(songs, HttpStatus.OK);            } catch (RuntimeException e) {                return new ResponseEntity<>(null, HttpStatus.BAD_REQUEST);            }        } else {            // Si el código de la sala no es válido, devolver un error            return new ResponseEntity<>(null, HttpStatus.NOT_FOUND);        }    }}