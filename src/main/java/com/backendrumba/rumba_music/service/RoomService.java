package com.backendrumba.rumba_music.service;import com.backendrumba.rumba_music.model.Roles;import com.backendrumba.rumba_music.model.Room;import com.backendrumba.rumba_music.model.User;import com.backendrumba.rumba_music.repository.RoomRepository;import com.backendrumba.rumba_music.repository.UserRepository;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import java.util.Optional;@Servicepublic class RoomService {    @Autowired    private RoomRepository roomRepository;    @Autowired    private UserRepository userRepository;    // Método para crear una nueva sala    public Room createRoom(User dj) {        if (dj.getRole() == Roles.DJ) {            Room room = new Room();            room.setRoomCode(generateRoomCode());  // Genera un código único para la sala            roomRepository.save(room);            dj.setRoom(room);  // Asignar la sala al DJ            userRepository.save(dj);  // Guardar los cambios del DJ            return room;        } else {            throw new RuntimeException("Solo los DJs pueden crear una sala.");        }    }    // Método para encontrar una sala por su código    public Optional<Room> findByRoomCode(String roomCode) {        return roomRepository.findByRoomCode(roomCode);    }    // Método para que un usuario se una a una sala    public String joinRoom(User user, String roomCode) {        Optional<Room> roomOpt = findByRoomCode(roomCode);        if (roomOpt.isPresent()) {            Room room = roomOpt.get();            user.setRoom(room);            user.setConnected(true);  // El usuario está ahora conectado            userRepository.save(user);            return "El usuario " + user.getName() + " se ha unido a la sala con el código: " + roomCode;        } else {            throw new RuntimeException("Sala no encontrada.");        }    }    // Método para eliminar una sala    public void deleteRoom(Room room) {        // Desconectar a todos los usuarios de la sala antes de eliminarla        for (User user : room.getUsers()) {            user.setRoom(null);  // Eliminar la referencia a la sala            user.setConnected(false);  // Marcar al usuario como desconectado            userRepository.save(user);        }        roomRepository.delete(room);    }    // Método para verificar si la sala está en reproducción    public boolean isRoomPlaying(String roomCode) {        Optional<Room> roomOpt = findByRoomCode(roomCode);        if (roomOpt.isPresent()) {            return roomOpt.get().isPlaying();        }        return false;    }    // Método auxiliar para generar un código único para la sala    private String generateRoomCode() {        return String.valueOf((int) (Math.random() * 9000) + 1000);  // Generar un código de 4 dígitos    }}