package com.backendrumba.rumba_music.service;import com.backendrumba.rumba_music.model.Roles;import com.backendrumba.rumba_music.model.Room;import com.backendrumba.rumba_music.model.User;import com.backendrumba.rumba_music.repository.RoomRepository;import com.backendrumba.rumba_music.repository.UserRepository;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import java.util.List;import java.util.Optional;@Servicepublic class UserService {    @Autowired    private UserRepository userRepository;    @Autowired    private RoomRepository roomRepository;    // Método para registrar un usuario    public User registerUser(String name, Roles role) {        // Verificar si ya existe un usuario con el mismo nombre de dispositivo        Optional<User> existingUser = userRepository.findByName(name);        if (existingUser.isPresent()) {            throw new RuntimeException("El usuario con ese nombre de dispositivo ya está registrado.");        }        User user = new User();        user.setName(name);        user.setRole(role);        user.setConnected(false);  // Por defecto, no está conectado        return userRepository.save(user);    }    // Método para encontrar un usuario por su ID    public Optional<User> findById(Long userId) {        return userRepository.findById(userId);    }    // Método para encontrar un usuario por su nombre (login)    public User loginUser(String name) {        Optional<User> user = userRepository.findByName(name);        if (user.isPresent()) {            return user.get();  // Si el usuario existe, lo devuelve        } else {            throw new RuntimeException("Usuario no encontrado.");  // Lanza una excepción si el usuario no existe        }    }    // Método para listar todos los usuarios con rol USER    public List<User> findAllUsers() {        return userRepository.findByRole(Roles.USER);    }    // Método para listar todos los DJs    public List<User> findAllDJs() {        return userRepository.findByRole(Roles.DJ);    }    // Método para obtener todos los usuarios    public List<User> findAll() {        return userRepository.findAll();    }    // Método para actualizar un usuario    public User updateUser(Long userId, User updatedUser) {        Optional<User> userOpt = userRepository.findById(userId);        if (userOpt.isPresent()) {            User user = userOpt.get();            user.setName(updatedUser.getName());            user.setRole(updatedUser.getRole());            user.setConnected(updatedUser.isConnected());            return userRepository.save(user);        } else {            throw new RuntimeException("Usuario no encontrado.");        }    }    // Método para eliminar un usuario por su ID    public void deleteUser(Long userId) {        if (userRepository.existsById(userId)) {            userRepository.deleteById(userId);        } else {            throw new RuntimeException("Usuario no encontrado.");        }    }}